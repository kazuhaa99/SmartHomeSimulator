package com.example.project2.automation;

import core.AutomationTask;
import com.example.project2.services.AutomationService;
import com.example.project2.services.DeviceService;

import java.time.format.DateTimeFormatter;
import java.util.Map;
import java.time.LocalTime;
import java.util.List;

public class AutomationScheduler extends Thread {
    private final AutomationService automationService;
    private final DeviceService deviceService;
    private final String username;
    private final String address;

    public AutomationScheduler(AutomationService automationService, DeviceService deviceService,
                               String username, String address) {
        this.automationService = automationService;
        this.deviceService = deviceService;
        this.username = username;
        this.address = address;
    }

    @Override
    public void run() {
        System.out.println("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + username);
        while (!isInterrupted()) {
            automationService.loadTasks(); // üîÅ –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ —Ñ–∞–π–ª–∞ –∫–∞–∂–¥—ã–π —Ä–∞–∑
            checkAndExecuteTasks();       // ‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞
            try {
                Thread.sleep(60000);      // ‚è≥ –†–∞–∑ –≤ –º–∏–Ω—É—Ç—É
            } catch (InterruptedException e) {
                System.out.println("‚õî –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è: " + username);
                break;
            }
        }
    }


    private void checkAndExecuteTasks() {
        Map<String, List<AutomationTask>> roomTasks = automationService.getTasksForUser(username, address);
        String currentTime = LocalTime.now().withSecond(0).withNano(0).toString();

        System.out.println("–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: " + currentTime);

        for (Map.Entry<String, List<AutomationTask>> entry : roomTasks.entrySet()) {
            String room = entry.getKey();
            List<AutomationTask> taskList = entry.getValue();

            taskList.removeIf(task -> {
                if (task.getTime().toString().equals(currentTime)) {
                    deviceService.executeAutomationTask(task);
                    String time = LocalTime.now().format(DateTimeFormatter.ofPattern("HH:mm"));
                    String message = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: " + task.getDeviceName() + " –≤ " + task.getRoomName() + " (" + time + ")";
                    automationService.addNotification(username, address, message);
                    System.out.println("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: " + task);
                    return true; // –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                }
                return false;
            });
        }

        automationService.saveTasks(); // üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö
    }


}
